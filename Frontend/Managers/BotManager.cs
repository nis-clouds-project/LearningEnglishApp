using Frontend.Services;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using System.Text;

namespace Frontend.Managers
{
    /// <summary>
    /// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
    /// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    /// </summary>
    public static class BotManager
    {
        private static TelegramBotClient? _bot;
        private static ApiClient? _apiClient;
        private static readonly Dictionary<string, string> Categories = new()
        {
            { "Food", "üçî –ï–¥–∞" },
            { "Technology", "üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏" },
            { "Business", "üíº –ë–∏–∑–Ω–µ—Å" },
            { "Travel", "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è" },
            { "Health", "üè• –ó–¥–æ—Ä–æ–≤—å–µ" },
            { "Education", "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ" },
            { "Entertainment", "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" },
            { "Sports", "‚öΩ –°–ø–æ—Ä—Ç" },
            { "All", "üìö –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" }
        };

        private static CancellationTokenSource? _cts;

        /// <summary>
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        /// </summary>
        public static async Task StartAsync()
        {
            var token = Environment.GetEnvironmentVariable("TELEGRAM_BOT_TOKEN") 
                       ?? throw new InvalidOperationException("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
            var baseUrl = Environment.GetEnvironmentVariable("BACKEND_API_URL") 
                       ?? throw new InvalidOperationException("BACKEND_API_URL –Ω–µ –∑–∞–¥–∞–Ω");
            
            Console.WriteLine($"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å URL –±—ç–∫–µ–Ω–¥–∞: {baseUrl}");
            
            _bot = new TelegramBotClient(token);
            _apiClient = new ApiClient(baseUrl);
            _cts = new CancellationTokenSource();

            var receiverOptions = new ReceiverOptions
            {
                AllowedUpdates = Array.Empty<UpdateType>(),
                ThrowPendingUpdates = true
            };

            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
                var me = await _bot.GetMeAsync(_cts.Token);
                Console.WriteLine($"–ë–æ—Ç @{me.Username} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                _bot.StartReceiving(
                    updateHandler: HandleUpdateAsync,
                    pollingErrorHandler: HandleErrorAsync,
                    receiverOptions: receiverOptions,
                    cancellationToken: _cts.Token
                );

                // –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
                while (!_cts.Token.IsCancellationRequested)
                {
                    await Task.Delay(1000, _cts.Token);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {ex.Message}");
                throw;
            }
        }

        /// <summary>
        /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞.
        /// </summary>
        public static void Stop()
        {
            _cts?.Cancel();
            _apiClient?.Dispose();
        }

        private static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            try
            {
                if (update.CallbackQuery is { } callback)
                {
                    await HandleCallbackAsync(callback, cancellationToken);
                    return;
                }

                if (update.Message is not { } message)
                    return;
                if (message.Text is not { } messageText)
                    return;

                var chatId = message.Chat.Id;
                Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{messageText}' –≤ —á–∞—Ç–µ {chatId}");

                if (messageText == "/start")
                {
                    await HandleStartCommand(chatId, cancellationToken);
                    return;
                }

                var userExists = await _apiClient!.UserExistsAsync(chatId);
                if (!userExists)
                {
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                        cancellationToken: cancellationToken);
                    return;
                }

                switch (messageText.ToLower())
                {
                    case "/learn":
                        await ShowCategories(chatId, cancellationToken);
                        break;
                    case "/help":
                        await ShowHelp(chatId, cancellationToken);
                        break;
                    case "/categories":
                        await HandleCategoriesCommand(chatId);
                        break;
                    case "/generate":
                        await HandleGenerateCommand(chatId, cancellationToken);
                        break;
                    case "/vocabulary":
                        await HandleVocabularyCommand(chatId, cancellationToken);
                        break;
                    default:
                        await _bot!.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
                            cancellationToken: cancellationToken);
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {ex}");
            }
        }

        private static async Task HandleCallbackAsync(CallbackQuery callback, CancellationToken cancellationToken)
        {
            var chatId = callback.Message?.Chat.Id;
            if (chatId == null) return;

            var data = callback.Data;
            if (string.IsNullOrEmpty(data)) return;

            try
            {
                Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω callback —Å –¥–∞–Ω–Ω—ã–º–∏: {data}");

                if (data.StartsWith("learn_"))
                {
                    var category = data[6..];
                    Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}");
                    await HandleCategoryLearning(chatId.Value, category, cancellationToken);
                }
                else if (data.StartsWith("known_"))
                {
                    var idString = data[6..];
                    Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞ —Å ID —Å—Ç—Ä–æ–∫–æ–π: {idString}");
                    if (int.TryParse(idString, out var wordId))
                    {
                        Console.WriteLine($"ID —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {wordId}");
                        await HandleKnownWord(chatId.Value, wordId, cancellationToken);
                    }
                    else
                    {
                        Console.WriteLine($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏: {idString}");
                        await _bot!.SendTextMessageAsync(
                            chatId: chatId.Value,
                            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            cancellationToken: cancellationToken);
                    }
                }
                else if (data.StartsWith("show_translation_"))
                {
                    var idString = data["show_translation_".Length..];
                    Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å ID —Å—Ç—Ä–æ–∫–æ–π: {idString}");
                    Console.WriteLine($"–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ ID: {idString.Length}");
                    Console.WriteLine($"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ ID: '{idString}'");
                    
                    if (int.TryParse(idString, out var wordId))
                    {
                        Console.WriteLine($"ID —Å–ª–æ–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω: {wordId}");
                        try 
                        {
                            await HandleShowTranslation(chatId.Value, wordId, cancellationToken);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ HandleShowTranslation: {ex.Message}");
                            Console.WriteLine($"Stack trace: {ex.StackTrace}");
                            throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        }
                    }
                    else
                    {
                        Console.WriteLine($"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏: '{idString}'");
                        await _bot!.SendTextMessageAsync(
                            chatId: chatId.Value,
                            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                            cancellationToken: cancellationToken);
                    }
                }
                else if (data.StartsWith("next_"))
                {
                    var category = data[5..];
                    Console.WriteLine($"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}");
                    await HandleCategoryLearning(chatId.Value, category, cancellationToken);
                }
                else if (data == "return_menu")
                {
                    Console.WriteLine("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
                    await HandleStartCommand(chatId.Value, cancellationToken);
                }
                else
                {
                    Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø callback –¥–∞–Ω–Ω—ã—Ö: {data}");
                }

                await _bot!.AnswerCallbackQueryAsync(
                    callbackQueryId: callback.Id,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {ex}");
                Console.WriteLine($"–î–∞–Ω–Ω—ã–µ callback: {data}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");

                await _bot!.AnswerCallbackQueryAsync(
                    callbackQueryId: callback.Id,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    cancellationToken: cancellationToken);
                
                await _bot!.SendTextMessageAsync(
                    chatId: chatId.Value,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    cancellationToken: cancellationToken);
            }
        }

        private static Task HandleErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {exception}");
            return Task.CompletedTask;
        }

        private static async Task HandleStartCommand(long chatId, CancellationToken cancellationToken)
        {
            try
            {
                var userExists = await _apiClient!.UserExistsAsync(chatId);
                if (!userExists)
                {
                    var success = await _apiClient.AddUserAsync(chatId);
                    if (!success)
                    {
                        await _bot!.SendTextMessageAsync(
                            chatId: chatId,
                            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            cancellationToken: cancellationToken);
                        return;
                    }
                }

                var welcomeMessage = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!\n\n" +
                                   "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                                   "üìö /learn - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤\n" +
                                   "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n" +
                                   "/categories - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ª–æ–≤\n" +
                                   "/generate - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤\n" +
                                   "/vocabulary - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞";

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: welcomeMessage,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task ShowCategories(long chatId, CancellationToken cancellationToken)
        {
            try
            {
                var buttons = Categories.Select(category =>
                    new[] { InlineKeyboardButton.WithCallbackData(
                        text: category.Value,
                        callbackData: $"learn_{category.Key}") }
                ).ToList();

                buttons.Add(new[] { InlineKeyboardButton.WithCallbackData(
                    text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                    callbackData: "return_menu") });

                var keyboard = new InlineKeyboardMarkup(buttons);

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:",
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task ShowHelp(long chatId, CancellationToken cancellationToken)
        {
            try
            {
                var helpMessage = "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n" +
                                 "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                                 "üëã /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
                                 "üìö /learn - –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤\n" +
                                 "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" +
                                 "–ö–∞–∫ —É—á–∏—Ç—å —Å–ª–æ–≤–∞:\n" +
                                 "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /learn\n" +
                                 "2. –ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞–º —Å–ª–æ–≤–∞\n" +
                                 "3. –û—Ç–º–µ—á–∞–π—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–∞–º —Å–ª–æ–≤–∞\n\n" +
                                 "–°–æ–≤–µ—Ç—ã:\n" +
                                 "- –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n" +
                                 "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ\n" +
                                 "- –£—á–∏—Ç–µ –ø–æ–Ω–µ–º–Ω–æ–≥—É, –Ω–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å";

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: helpMessage,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleCategoryLearning(long chatId, string category, CancellationToken cancellationToken)
        {
            try
            {
                var word = await _apiClient!.GetRandomWordAsync(chatId, category == "All" ? null : category);
                if (word == null)
                {
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.",
                        cancellationToken: cancellationToken);
                    return;
                }

                var message = $"üìù –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n" +
                             $"üá¨üáß {word.Text}\n" +
                             $"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {Categories[word.Category]}";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData(
                            text: "‚úÖ –ó–Ω–∞—é —ç—Ç–æ —Å–ª–æ–≤–æ",
                            callbackData: $"known_{word.Id}"),
                        InlineKeyboardButton.WithCallbackData(
                            text: "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
                            callbackData: $"show_translation_{word.Id}")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData(
                            text: "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ",
                            callbackData: $"next_{category}"),
                        InlineKeyboardButton.WithCallbackData(
                            text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callbackData: "return_menu")
                    }
                });

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: message,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleShowTranslation(long chatId, int wordId, CancellationToken cancellationToken)
        {
            try
            {
                Console.WriteLine($"[HandleShowTranslation] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–ª–æ–≤–∞ —Å ID: {wordId}");
                
                if (_apiClient == null)
                {
                    Console.WriteLine("[HandleShowTranslation] _apiClient is null!");
                    throw new InvalidOperationException("ApiClient is not initialized");
                }
                
                Console.WriteLine("[HandleShowTranslation] –ó–∞–ø—Ä–æ—Å —Å–ª–æ–≤–∞ –∏–∑ API...");
                var word = await _apiClient.GetWordByIdAsync(wordId);
                Console.WriteLine($"[HandleShowTranslation] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–æ–≤–∞: {(word != null ? "–ø–æ–ª—É—á–µ–Ω–æ" : "null")}");
                
                if (word == null)
                {
                    Console.WriteLine($"[HandleShowTranslation] –°–ª–æ–≤–æ —Å ID {wordId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ–≤–µ.",
                        cancellationToken: cancellationToken);
                    return;
                }

                Console.WriteLine($"[HandleShowTranslation] –ü–æ–ª—É—á–µ–Ω–æ —Å–ª–æ–≤–æ: {word.Text} ({word.Translation}), –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {word.Category}");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
                if (!Categories.ContainsKey(word.Category))
                {
                    Console.WriteLine($"[HandleShowTranslation] –ö–∞—Ç–µ–≥–æ—Ä–∏—è {word.Category} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π");
                    word.Category = "All"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "All" –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                }

                var message = $"üìù –°–ª–æ–≤–æ:\n\n" +
                             $"üá¨üáß {word.Text}\n" +
                             $"üá∑üá∫ {word.Translation}\n" +
                             $"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {Categories[word.Category]}";

                var keyboard = new InlineKeyboardMarkup(new[]
                {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData(
                            text: "‚úÖ –ó–∞–ø–æ–º–Ω–∏–ª(–∞)",
                            callbackData: $"known_{word.Id}"),
                        InlineKeyboardButton.WithCallbackData(
                            text: "‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ",
                            callbackData: $"next_{word.Category}")
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData(
                            text: "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é",
                            callbackData: "return_menu")
                    }
                });

                Console.WriteLine("[HandleShowTranslation] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: message,
                    replyMarkup: keyboard,
                    cancellationToken: cancellationToken);
                Console.WriteLine("[HandleShowTranslation] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[HandleShowTranslation] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–ª–æ–≤–∞ {wordId}:");
                Console.WriteLine($"[HandleShowTranslation] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {ex.Message}");
                Console.WriteLine($"[HandleShowTranslation] –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {ex.GetType().Name}");
                Console.WriteLine($"[HandleShowTranslation] Stack trace: {ex.StackTrace}");
                
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"[HandleShowTranslation] Inner exception: {ex.InnerException.Message}");
                    Console.WriteLine($"[HandleShowTranslation] Inner exception stack trace: {ex.InnerException.StackTrace}");
                }
                
                throw; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            }
        }

        private static async Task HandleKnownWord(long chatId, int wordId, CancellationToken cancellationToken)
        {
            try
            {
                Console.WriteLine($"[HandleKnownWord] –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ {wordId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chatId}");
                
                if (_apiClient == null)
                {
                    Console.WriteLine("[HandleKnownWord] _apiClient is null!");
                    throw new InvalidOperationException("ApiClient is not initialized");
                }

                Console.WriteLine("[HandleKnownWord] –í—ã–∑–æ–≤ AddWordToVocabularyAsync...");
                var success = await _apiClient.AddWordToVocabularyAsync(chatId, wordId);
                Console.WriteLine($"[HandleKnownWord] –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞: {success}");

                if (success)
                {
                    Console.WriteLine("[HandleKnownWord] –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à —Å–ª–æ–≤–∞—Ä—å.",
                        cancellationToken: cancellationToken);

                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
                    var word = await _apiClient.GetWordByIdAsync(wordId);
                    if (word != null)
                    {
                        Console.WriteLine($"[HandleKnownWord] –ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {word.Category}");
                        await HandleCategoryLearning(chatId, word.Category, cancellationToken);
                    }
                }
                else
                {
                    Console.WriteLine("[HandleKnownWord] –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ");
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        cancellationToken: cancellationToken);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[HandleKnownWord] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞:");
                Console.WriteLine($"[HandleKnownWord] –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {ex.Message}");
                Console.WriteLine($"[HandleKnownWord] –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {ex.GetType().Name}");
                Console.WriteLine($"[HandleKnownWord] Stack trace: {ex.StackTrace}");
                
                if (ex.InnerException != null)
                {
                    Console.WriteLine($"[HandleKnownWord] Inner exception: {ex.InnerException.Message}");
                    Console.WriteLine($"[HandleKnownWord] Inner exception stack trace: {ex.InnerException.StackTrace}");
                }

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleCategoriesCommand(long chatId)
        {
            try
            {
                var buttons = Categories.Select(category =>
                    new[] { InlineKeyboardButton.WithCallbackData(
                        text: category.Value,
                        callbackData: $"learn_{category.Key}") }
                );

                var keyboard = new InlineKeyboardMarkup(buttons);

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
                    replyMarkup: keyboard);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }

        private static async Task HandleGenerateCommand(long chatId, CancellationToken cancellationToken)
        {
            try
            {
                var text = await _apiClient!.GenerateTextFromVocabularyAsync(chatId);
                if (string.IsNullOrEmpty(text))
                {
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤.",
                        cancellationToken: cancellationToken);
                    return;
                }

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: $"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}",
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }

        private static async Task HandleVocabularyCommand(long chatId, CancellationToken cancellationToken)
        {
            try
            {
                var vocabulary = await _apiClient!.GetLearnedWordsAsync(chatId);
                if (vocabulary == null || !vocabulary.Any())
                {
                    await _bot!.SendTextMessageAsync(
                        chatId: chatId,
                        text: "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ!",
                        cancellationToken: cancellationToken);
                    return;
                }

                var message = new StringBuilder("üìö –í–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å:\n\n");
                
                foreach (var category in vocabulary)
                {
                    message.AppendLine($"üìë *{category.Category}*:");
                    foreach (var word in category.Words)
                    {
                        message.AppendLine($"‚Ä¢ {word.Text} - {word.Translation}");
                    }
                    message.AppendLine();
                }

                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: message.ToString(),
                    parseMode: ParseMode.Markdown,
                    cancellationToken: cancellationToken);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {ex}");
                await _bot!.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    cancellationToken: cancellationToken);
            }
        }
    }
}